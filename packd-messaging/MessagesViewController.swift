//
//  MessagesViewController.swift
//  packd-messaging
//
//  Created by Cameron Porter on 11/10/16.
//  Copyright Â© 2016 Cameron Porter. All rights reserved.
//

import UIKit
import Messages


class MessagesViewController: MSMessagesAppViewController {
    
    // MARK: - Model
    
    // MARK: - View
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = Colors.highlight
        
        setupSubviews()
    }
    
    private func setupSubviews() {
        addSubviews()
        anchorPackdButton()
        addTargets()
    }
    
    private func addSubviews() {
        view.addSubview(packdButton)
    }
    
    private func anchorSubviews() {
        anchorPackdButton()
    }
    
    private func addTargets() {
        addTargetPackdButton()
    }
    
    let packdButton: UIButton = {
        let button = UIButton()
        button.translatesAutoresizingMaskIntoConstraints = false
        button.backgroundColor = UIColor.clear
        button.setTitle("PACKD", for: .normal)
        button.titleLabel?.font =  Fonts.boldFont(ofSize: Size.oneFinger / 2)
        button.titleLabel?.textAlignment = .center
        button.setTitleColor(UIColor.black, for: .normal)
        return button
    }()
    
    private func anchorPackdButton() {
        packdButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -Size.oneFinger).isActive = true
        packdButton.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 0).isActive = true
        packdButton.heightAnchor.constraint(equalToConstant: Size.oneFinger).isActive = true
        packdButton.widthAnchor.constraint(equalToConstant: Size.oneFinger * 2).isActive = true
    }
    
    private func addTargetPackdButton() {
        packdButton.addTarget(self, action: #selector(sendCustomMessage), for: .touchUpInside)
    }
    
    // MARK: - Targets 
    @objc private func sendCustomMessage() {
        
        let layout = MSMessageTemplateLayout()
        layout.image = #imageLiteral(resourceName: "message_nav_icon")
        layout.caption = "PACKD"
        
        let message = MSMessage(session: MSSession())
        message.layout = layout
        message.url = URL(fileURLWithPath: "test")
        
        activeConversation?.insert(message, completionHandler: nil)
    }
    
        
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        switch presentationStyle {
        case .compact:
            return
        case .expanded:
            return
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        
        switch presentationStyle {
        case .compact:
            return
        case .expanded:
            return
        }
    }

}
